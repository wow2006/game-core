========================================================================
GCore Project 
========================================================================

TODO :

- look for places where those libs have an appropriate use or boost replace:
	- std::tr1::unordered_map
	- std::tr1::array 
- read and update doc comments!
- generate the doc (and correct comments) with doxyS http://www.doxys.dk/doxys_homepage/index.html

# Test projects
- Console
- Event
- Geometry
- Interpolation
- Log
- Phase 
- Task

# Geometry
- composed curve (one type curve and multitype if possible)
- curve generator objects or functions
	- "smooth move"
	- circle
	- spiral
	- etc
- quad (see the algorithm in NetRush/NR_ConsoleDisplay.cpp ConsoleDisplayFactory::initializeResources )
	- see different triangle setting in quads
- grid
- flat shapes
	- allow serialization/deserialization (in simple and readable texte format) SVG?
- box
- sphere (curve based?)

	

# Interpolator
- interpolation on rotations
- comments! the ones now are temporary!
- interpolator manager
	- interpolation task



# Console
- put console command names as console command constructor parameter
- "cursor" management.
- replace listener objects by boost::signal if possible?
- allow exclusive command mode :
	- a command return a boolean on execution, false if it should keep the console controle
	- a command that have the command control will automatially receive the next inputs of the console as parametters 
		(over the default command and without taking account of command prefixes)
	- while a command is taking control, the command line will have a prefix (">" by default) that will not be parsed
- Template character and string container types - if possible.
	- note : doing this may force us to template all Console - see the impact.
- see if std::tr1::regex could replace tokenizer usage in command parametters parsing

# Event
- Rewrite event system - see http://www.gamedev.net/reference/articles/article2459.asp
- see if you can use boost::signal or function but don't forget that the processing time
	may be different than the event sent time;


# String
- add useful string manipulation functions (see Ogre::StringUtils )

# Log
- take a look at the future boost::logging system ( http://torjo.com/log2/index.html ) - maybe better as manage multithread programming
	- another boost lib proposition : http://tinyurl.com/5e4fd7



---------------------------------------------------------------------------
--DONE SINCE 19/06/2008----------------------------------------------------

- dynamic interpolations (with "moving" final position)
- Interpolator : make the constructor parametters more optionnal and ADD ACCESSORS and modifiers!! - no more parameter in constructors
- separate speed/fixed time concept from rail/pole concept
- variable speed interpolator and/or algorithme based
- add a "proxy" task that will simply call a function each time the task is updated, using <functional> (tr1/boost). 
- look for places where those libs have an appropriate use or boost replace:
	- std::tr1::function - see listeners and console commands!
	- std::tr1::shared_ptr & std::tr1::weak_ptr
